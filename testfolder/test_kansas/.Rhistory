archivos <- archivos[grep(".[Aa][Ww][Dd]$", archivos)]
awdfile <- archivos[1]
awdfile <- str_replace(awdfile, ".AWD", "")
# Cargar data para un grafico
gdata <- check.acvfilter(awdfile)
gdata <- gdata$semiper
gdata <- gdata$per01
set
head(gdata)
ui <- fluidPage(
# Titulo
titlePanel("Slider range test with plot"),
# En una row
fluidRow(
column(12, align = "center",
# # El plot
# plotOutput("periodPlot", height = 200, width = "90%"),
#
# # El Slider
# sliderInput("sliderEdicion", label = NA,
#            min = 0, max = 100, value = c(0,100), width = "90%")
# El grafico primero
plotOutput("periodPlot", height = 200, width = "90%"),
# Input: Slider for the number of bins
uiOutput("sliderEdicion")
)
),
fluidRow(
column(12,
# Botón de reset
actionButton("resetBtn", "Resetear"),
verbatimTextOutput("test")
)
)
)
# ---- Define server logic ------------------------------------------
server <- function(input, output, session){
# Un botón de reset update el eslaider
observeEvent(input$resetBtn, {
# El reset debiera calzar con el del grafico
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
updateSliderInput(session, "rangoX", value = c(min(xscale), max(xscale)))
})
# Render ui del slider porque necesito que el min y max no sea fijo
output$sliderEdicion <- renderUI({
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
minui <- min(xscale)
maxui <- max(xscale)
sliderInput("rangoX", label = NA,
min = minui, max = maxui, value = c(minui, maxui),
width = "95%")
})
# El mono
output$distPlot <- renderPlot({
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
xscale <- c(min(xscale), max(xscale))
if (sum(xscale == input$rangoX) == 2){
lim.x <- NULL
} else {
lim.x <- input$rangoX
}
create.plotSimple(gdata)
})
output$test <- renderPrint({
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
xscale <- c(min(xscale), max(xscale))
if (sum(xscale == input$rangoX) == 2){
lim.x <- NULL
} else {
lim.x <- input$rangoX
}
paste(lim.x)
})
}
# Run the application
shinyApp(ui = ui, server = server)
source('D:/OneDrive/INTA/Actigrafia/testScript.R', encoding = 'UTF-8', echo=TRUE)
# ---- Define UI for app --------------------------------------------
ui <- fluidPage(
# Titulo
titlePanel("Slider range test with plot"),
# En una row
fluidRow(
column(12, align = "center",
# # El plot
# plotOutput("periodPlot", height = 200, width = "90%"),
#
# # El Slider
# sliderInput("sliderEdicion", label = NA,
#            min = 0, max = 100, value = c(0,100), width = "90%")
# El grafico primero
plotOutput("periodPlot", height = 200, width = "90%"),
# Input: Slider for the number of bins
uiOutput("sliderEdicion")
)
),
fluidRow(
column(12,
# Botón de reset
actionButton("resetBtn", "Resetear"),
verbatimTextOutput("test")
)
)
)
# ---- Define server logic ------------------------------------------
server <- function(input, output, session){
# Un botón de reset update el eslaider
observeEvent(input$resetBtn, {
# El reset debiera calzar con el del grafico
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
updateSliderInput(session, "rangoX", value = c(min(xscale), max(xscale)))
})
# Render ui del slider porque necesito que el min y max no sea fijo
output$sliderEdicion <- renderUI({
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
minui <- min(xscale)
maxui <- max(xscale)
sliderInput("rangoX", label = NA,
min = minui, max = maxui, value = c(minui, maxui),
width = "95%")
})
# El mono
output$periodPlot <- renderPlot({
create.plotSimple(gdata, limites = input$rangoX)
})
output$test <- renderPrint({
lim.x()
})
}
# Run the application
shinyApp(ui = ui, server = server)
semiperdf <- gdata
limites = NULL
# Hora decimal continua
lim <- as.numeric(set$ininoc)/3600
semiperdf <- mutate(semiperdf, xscale = ifelse(hrdec < lim,  hrdec + 24, hrdec))
# X: Escala y etuquetas
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
xlabel <- ifelse(xscale >= 48, xscale - 48, ifelse(xscale >= 24, xscale - 24, xscale))
# Y: Lineas al inicio, dia, y fin
ylinea <- as.numeric(c(set$ininoc, set$inidia + hours(24), set$ininoc + hours(24)))/3600
# Y: Limites
limY <-  c(0, ceiling(max(semiperdf$act.edit)/10)*10)
limY[2] <- limY[2] * pct.y
# Limite en X
if (class(limites) == "NULL"){
limX <- c(min(xscale), max(xscale))
} else {
limX <- limites
}
limX
wdata <- find.segment(semiperdf, st.edit, "W")
wdata
sdata <- find.segment(semiperdf, st.edit, "S")
sdata
View(gdata)
source('D:/OneDrive/INTA/Actigrafia/func_processAwd/create.plotSimple.R', encoding = 'UTF-8', echo=TRUE)
# ---- Define UI for app --------------------------------------------
ui <- fluidPage(
# Titulo
titlePanel("Slider range test with plot"),
# En una row
fluidRow(
column(12, align = "center",
# # El plot
# plotOutput("periodPlot", height = 200, width = "90%"),
#
# # El Slider
# sliderInput("sliderEdicion", label = NA,
#            min = 0, max = 100, value = c(0,100), width = "90%")
# El grafico primero
plotOutput("periodPlot", height = 200, width = "90%"),
# Input: Slider for the number of bins
uiOutput("sliderEdicion")
)
),
fluidRow(
column(12,
# Botón de reset
actionButton("resetBtn", "Resetear"),
verbatimTextOutput("test")
)
)
)
# ---- Define server logic ------------------------------------------
server <- function(input, output, session){
# Un botón de reset update el eslaider
observeEvent(input$resetBtn, {
# El reset debiera calzar con el del grafico
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
updateSliderInput(session, "rangoX", value = c(min(xscale), max(xscale)))
})
# Render ui del slider porque necesito que el min y max no sea fijo
output$sliderEdicion <- renderUI({
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
minui <- min(xscale)
maxui <- max(xscale)
sliderInput("rangoX", label = NA,
min = minui, max = maxui, value = c(minui, maxui),
width = "95%")
})
# El mono
output$periodPlot <- renderPlot({
create.plotSimple(gdata, limites = input$rangoX)
})
output$test <- renderPrint({
lim.x()
})
}
# Run the application
shinyApp(ui = ui, server = server)
source('D:/OneDrive/INTA/Actigrafia/func_processAwd/create.plotSimple.R', encoding = 'UTF-8', echo=TRUE)
# ---- Define UI for app --------------------------------------------
ui <- fluidPage(
# Titulo
titlePanel("Slider range test with plot"),
# En una row
fluidRow(
column(12, align = "center",
# # El plot
# plotOutput("periodPlot", height = 200, width = "90%"),
#
# # El Slider
# sliderInput("sliderEdicion", label = NA,
#            min = 0, max = 100, value = c(0,100), width = "90%")
# El grafico primero
plotOutput("periodPlot", height = 200, width = "90%"),
# Input: Slider for the number of bins
uiOutput("sliderEdicion")
)
),
fluidRow(
column(12,
# Botón de reset
actionButton("resetBtn", "Resetear"),
verbatimTextOutput("test")
)
)
)
# ---- Define server logic ------------------------------------------
server <- function(input, output, session){
# Un botón de reset update el eslaider
observeEvent(input$resetBtn, {
# El reset debiera calzar con el del grafico
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
updateSliderInput(session, "rangoX", value = c(min(xscale), max(xscale)))
})
# Render ui del slider porque necesito que el min y max no sea fijo
output$sliderEdicion <- renderUI({
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
minui <- min(xscale)
maxui <- max(xscale)
sliderInput("rangoX", label = NA,
min = minui, max = maxui, value = c(minui, maxui),
width = "95%")
})
# El mono
output$periodPlot <- renderPlot({
create.plotSimple(gdata, limites = input$rangoX)
})
output$test <- renderPrint({
lim.x()
})
}
# Run the application
shinyApp(ui = ui, server = server)
head(gdata)
source('D:/OneDrive/INTA/Actigrafia/func_processAwd/create.plotSimple.R', encoding = 'UTF-8', echo=TRUE)
# ---- Define UI for app --------------------------------------------
ui <- fluidPage(
# Titulo
titlePanel("Slider range test with plot"),
# En una row
fluidRow(
column(12, align = "center",
# # El plot
# plotOutput("periodPlot", height = 200, width = "90%"),
#
# # El Slider
# sliderInput("sliderEdicion", label = NA,
#            min = 0, max = 100, value = c(0,100), width = "90%")
# El grafico primero
plotOutput("periodPlot", height = 200, width = "90%"),
# Input: Slider for the number of bins
uiOutput("sliderEdicion")
)
),
fluidRow(
column(12,
# Botón de reset
actionButton("resetBtn", "Resetear"),
verbatimTextOutput("test")
)
)
)
# ---- Define server logic ------------------------------------------
server <- function(input, output, session){
# Un botón de reset update el eslaider
observeEvent(input$resetBtn, {
# El reset debiera calzar con el del grafico
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
updateSliderInput(session, "rangoX", value = c(min(xscale), max(xscale)))
})
# Render ui del slider porque necesito que el min y max no sea fijo
output$sliderEdicion <- renderUI({
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
minui <- min(xscale)
maxui <- max(xscale)
sliderInput("rangoX", label = NA,
min = minui, max = maxui, value = c(minui, maxui),
width = "95%")
})
# El mono
output$periodPlot <- renderPlot({
create.plotSimple(gdata, limites = input$rangoX)
})
output$test <- renderPrint({
lim.x()
})
}
# Run the application
shinyApp(ui = ui, server = server)
source('D:/OneDrive/INTA/Actigrafia/func_processAwd/create.plotSimple.R', encoding = 'UTF-8', echo=TRUE)
# ---- Define UI for app --------------------------------------------
ui <- fluidPage(
# Titulo
titlePanel("Slider range test with plot"),
# En una row
fluidRow(
column(12, align = "center",
# # El plot
# plotOutput("periodPlot", height = 200, width = "90%"),
#
# # El Slider
# sliderInput("sliderEdicion", label = NA,
#            min = 0, max = 100, value = c(0,100), width = "90%")
# El grafico primero
plotOutput("periodPlot", height = 200, width = "90%"),
# Input: Slider for the number of bins
uiOutput("sliderEdicion")
)
),
fluidRow(
column(12,
# Botón de reset
actionButton("resetBtn", "Resetear"),
verbatimTextOutput("test")
)
)
)
# ---- Define server logic ------------------------------------------
server <- function(input, output, session){
# Un botón de reset update el eslaider
observeEvent(input$resetBtn, {
# El reset debiera calzar con el del grafico
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
updateSliderInput(session, "rangoX", value = c(min(xscale), max(xscale)))
})
# Render ui del slider porque necesito que el min y max no sea fijo
output$sliderEdicion <- renderUI({
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
minui <- min(xscale)
maxui <- max(xscale)
sliderInput("rangoX", label = NA,
min = minui, max = maxui, value = c(minui, maxui),
width = "95%")
})
# El mono
output$periodPlot <- renderPlot({
create.plotSimple(gdata, limites = input$rangoX)
})
output$test <- renderPrint({
lim.x()
})
}
# Run the application
shinyApp(ui = ui, server = server)
wdata
sdata
sdata <- find.segment(semiperdf, st.edit, "S")
wdata <- find.segment(semiperdf, st.edit, "W")
wdata
sdata
sdata <- mutate(sdata, fin = fin + 1)
wdata <- mutate(wdata, fin = fin + 1)
sdata
wdata
fin[nrow(fin)]
sdata$fin[nrow(fin)]
sdata$fin[nrow(sdata)]
nrow(gdata)
# ---- Define UI for app --------------------------------------------
ui <- fluidPage(
# Titulo
titlePanel("Slider range test with plot"),
# En una row
fluidRow(
column(12, align = "center",
# # El plot
# plotOutput("periodPlot", height = 200, width = "90%"),
#
# # El Slider
# sliderInput("sliderEdicion", label = NA,
#            min = 0, max = 100, value = c(0,100), width = "90%")
# El grafico primero
plotOutput("periodPlot", height = 200, width = "90%"),
# Input: Slider for the number of bins
uiOutput("sliderEdicion")
)
),
fluidRow(
column(12,
# Botón de reset
actionButton("resetBtn", "Resetear"),
verbatimTextOutput("test")
)
)
)
# ---- Define server logic ------------------------------------------
server <- function(input, output, session){
# Un botón de reset update el eslaider
observeEvent(input$resetBtn, {
# El reset debiera calzar con el del grafico
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
updateSliderInput(session, "rangoX", value = c(min(xscale), max(xscale)))
})
# Render ui del slider porque necesito que el min y max no sea fijo
output$sliderEdicion <- renderUI({
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
minui <- min(xscale)
maxui <- max(xscale)
sliderInput("rangoX", label = NA,
min = minui, max = maxui, value = c(minui, maxui),
width = "95%")
})
# El mono
output$periodPlot <- renderPlot({
create.plotSimple(gdata, limites = input$rangoX)
})
output$test <- renderPrint({
lim.x()
})
}
# Run the application
shinyApp(ui = ui, server = server)
source('D:/OneDrive/INTA/Actigrafia/func_processAwd/create.plotSimple.R', encoding = 'UTF-8', echo=TRUE)
# ---- Define UI for app --------------------------------------------
ui <- fluidPage(
# Titulo
titlePanel("Slider range test with plot"),
# En una row
fluidRow(
column(12, align = "center",
# # El plot
# plotOutput("periodPlot", height = 200, width = "90%"),
#
# # El Slider
# sliderInput("sliderEdicion", label = NA,
#            min = 0, max = 100, value = c(0,100), width = "90%")
# El grafico primero
plotOutput("periodPlot", height = 200, width = "90%"),
# Input: Slider for the number of bins
uiOutput("sliderEdicion")
)
),
fluidRow(
column(12,
# Botón de reset
actionButton("resetBtn", "Resetear"),
verbatimTextOutput("test")
)
)
)
# ---- Define server logic ------------------------------------------
server <- function(input, output, session){
# Un botón de reset update el eslaider
observeEvent(input$resetBtn, {
# El reset debiera calzar con el del grafico
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
updateSliderInput(session, "rangoX", value = c(min(xscale), max(xscale)))
})
# Render ui del slider porque necesito que el min y max no sea fijo
output$sliderEdicion <- renderUI({
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
minui <- min(xscale)
maxui <- max(xscale)
sliderInput("rangoX", label = NA,
min = minui, max = maxui, value = c(minui, maxui),
width = "95%")
})
# El mono
output$periodPlot <- renderPlot({
create.plotSimple(gdata, limites = input$rangoX)
})
output$test <- renderPrint({
lim.x()
})
}
# Run the application
shinyApp(ui = ui, server = server)
source('D:/OneDrive/INTA/Actigrafia/func_processAwd/create.plotSimple.R', encoding = 'UTF-8', echo=TRUE)
column(12,
source('D:/OneDrive/INTA/Actigrafia/testScript.R', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/testScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/func_processAwd/create.plotSimple.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/testScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/func_processAwd/create.plotSimple.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/testScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/testScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/testScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/testScript.R', encoding = 'UTF-8', echo=TRUE)
