BenjaminVenegas_acv <- readRDS("D:/OneDrive/INTA/Actigrafia/testfolder/BenjaminVenegas_acv.rds")
View(BenjaminVenegas_acv)
library(shiny); runApp('OneDrive/App de prueba.R')
list.files()
dir()
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp()
awdfolder <- "D:/OneDrive/INTA/Patricio Peirano/2019.12 Kansas/kansas"
setwd(awdfolder)
awdfolder <- "D:/OneDrive/INTA/Patricio Peirano/2019.12 Kansas/kansas"
setwd(awdfolder)
archivos <- dir()
archivos <- archivos[grep(".[Aa][Ww][Dd]$", archivos)]
awdfile <- archivos[1]
awdfolder <- "D:/OneDrive/INTA/Actigrafia/testfolder/test_kansas"
setwd(awdfolder)
archivos <- dir()
archivos <- archivos[grep(".[Aa][Ww][Dd]$", archivos)]
awdfile <- archivos[1]
awdfile
awdfile <- str_replace(awfile, ".AWD", "")
awdfile <- str_replace(awdfile, ".AWD", "")
acvfile <- paste(awdfile, _acv.edit.RDS, sep ="")
acvfile <- paste(awdfile, "_acv.edit.RDS", sep = "")
# Cargar sujeto y archivos ----------------------------------------------------------
filterfile <- paste(awdfile, ".edit", sep = "")
acvfile <- readRDS(acvfile)
filterfile <- readRDS(filterfile)
filterfile <- readLines(filterfile)
filterfile
filterfile[6, length(filterfile)]
filterfile[6:length(filterfile)]
filterfile
filterfile <- filterfile[6:length(filterfile)]
filterfile
str_split(filterfile, ": ", simplify = TURE)
str_split(filterfile, ": ", simplify = TRUE)
str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile <- str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile
str_split(filterfile, " - ", ssimplify = TRUE)
str_split(filterfile, " - ", simplify = TRUE)
as.data.frame(str_split(filterfile, " - ", simplify = TRUE))
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE))
filterfile
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE), stringsAsFactors = FALSE)
filterfile <- paste(awdfile, ".edit", sep = "")
filterfile <- readLines(filterfile)
filterfile <- filterfile[6:length(filterfile)]
filterfile <- str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE), stringsAsFactors = FALSE)
filterfile <- readLines(filterfile)
filterfile
filterfile %>% rename(ini = V1, fin = V3)
names(filterfile) <- c("ini", "fin")
filterfile %>% rename(ini = ymd_hm(ini), fin = ymd_hm(fin))
names(filterfile) <- c("ini", "fin")
filterfile %>% rename(ini = ymd_hm(ini), fin = ymd_hm(fin))
filterfile %>% rename(ini = ymd_hm(ini), fin = ymd_hm(fin))
filterfile %>% mutate(ini = ymd_hm(ini), fin = ymd_hm(fin))
filterfile %>% mutate(ini = ymd_hm(ini), fin = ymd_hm(fin)) %>% arrange(ini)
filterfile <- paste(awdfile, ".edit", sep = "")
filterfile <- readLines(filterfile)
filterfile <- filterfile[6:length(filterfile)]
filterfile <- str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE), stringsAsFactors = FALSE)
names(filterfile) <- c("ini", "fin")
filterfile <- filterfile %>% mutate(ini = ymd_hm(ini), fin = ymd_hm(fin)) %>% arrange(ini)
i <- 1
head(acvfile)
time > filterfile$ini[i] & time < filterfile&fin[i]
time <- acvfile$time
time > filterfile$ini[i] & time < filterfile&fin[i]
filterfile$ini[i]
time[time > filterfile$ini[i] & time < filterfile&fin[i]]
time[which(time > filterfile$ini[i] & time < filterfile&fin[i])]
class(time)
time[which(time > filterfile$ini[i])]
which(time >= filterfile$ini[i])
which(time >= filterfile$ini[i] & time < filterfile&fin[i])
which(time >= filterfile$ini[i] & time <= filterfile&fin[i])
which(time >= filterfile$ini[i] & time <= filterfile$fin[i])
filtro <- acvfile$filter
filtro[which(time >= filterfile$ini[i] & time <= filterfile$fin[i])]
indx <- which(time >= filterfile$ini[i] & time <= filterfile$fin[i])
filtro[indx]
sum(is.na(filtro[indx]))
acvfile <- paste(awdfile, "_acv.edit.RDS", sep = "")
acvfile <- readRDS(acvfile)
filterfile <- paste(awdfile, ".edit", sep = "")
filterfile <- readLines(filterfile)
filterfile <- filterfile[6:length(filterfile)]
filterfile <- str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE), stringsAsFactors = FALSE)
names(filterfile) <- c("ini", "fin")
filterfile <- filterfile %>% mutate(ini = ymd_hm(ini), fin = ymd_hm(fin)) %>% arrange(ini)
# Que sean diferentes que NA, con eso me basta... a futuro checar el tipo de filtro
# i <- 1
time <- acvfile$time
filtro <- acvfile$filter
filtroERROR <- NULL
filtroNA <- NULL
for (i in 1:nrow(filterfile)){
indx <- which(time >= filterfile$ini[i] & time <= filterfile$fin[i])
# Solo deben haber numeros, nada de NA
if (sum(is.na(filtro[indx])) == 0){
filtroERROR <- c(filtroERROR, i)
}
# Guarda el index para la otra rueba
filtroNA <- c(filtroNA, indx)
}
filtroERROR
# Cargar acv y filter ----------------------------------------------------------
acvfile <- paste(awdfile, "_acv.edit.RDS", sep = "")
acvfile <- readRDS(acvfile)
filterfile <- paste(awdfile, ".edit", sep = "")
filterfile <- readLines(filterfile)
filterfile <- filterfile[6:length(filterfile)]
filterfile <- str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE), stringsAsFactors = FALSE)
names(filterfile) <- c("ini", "fin")
filterfile <- filterfile %>% mutate(ini = ymd_hm(ini), fin = ymd_hm(fin)) %>% arrange(ini)
# Que sean diferentes que NA, con eso me basta... a futuro checar el tipo de filtro
# i <- 1
time <- acvfile$time
filtro <- acvfile$filter
filtroERROR <- NULL
filtroNA <- NULL
for (i in 1:nrow(filterfile)){
indx <- which(time >= filterfile$ini[i] & time <= filterfile$fin[i])
# Solo deben haber numeros, nada de NA
if (sum(is.na(filtro[indx])) != 0){
filtroERROR <- c(filtroERROR, i)
}
# Guarda el index para la otra rueba
filtroNA <- c(filtroNA, indx)
}
filtroERROR
filtro[filtroNA]
filtro[!filtroNA]
NAtest <- 1:nrow(acvfile)
NAtest <- NAtest[-filtroNA]
filtro(NAtest)
filtro[NAtest]
sum(filtro[NAtest])
sum(is.na(filtro[NAtest]))
sum(!is.na(filtro[NAtest]))
acvfile <- paste(awdfile, "_acv.edit.RDS", sep = "")
acvfile <- readRDS(acvfile)
filterfile <- paste(awdfile, ".edit", sep = "")
filterfile <- readLines(filterfile)
filterfile <- filterfile[6:length(filterfile)]
filterfile <- str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE), stringsAsFactors = FALSE)
names(filterfile) <- c("ini", "fin")
filterfile <- filterfile %>% mutate(ini = ymd_hm(ini), fin = ymd_hm(fin)) %>% arrange(ini)
# Que sean diferentes que NA, con eso me basta... a futuro checar el tipo de filtro
# i <- 1
time <- acvfile$time
filtro <- acvfile$filter
filtroERROR <- NULL
filtroNA <- NULL
for (i in 1:nrow(filterfile)){
indx <- which(time >= filterfile$ini[i] & time <= filterfile$fin[i])
# Solo deben haber numeros, nada de NA
if (sum(is.na(filtro[indx])) != 0){
filtroERROR <- c(filtroERROR, i)
}
# Guarda el index para la otra rueba
filtroNA <- c(filtroNA, indx)
}
# Testear lo de afuera del filtro
NAtest <- 1:nrow(acvfile)
NAtest <- NAtest[-filtroNA]
NAtest <- sum(!is.na(filtro[NAtest]))
if (NAtest != 0){
filtroNA <- "ErrorNA"
}
filtroNA
filtroERROR <- rep(length(filterfile), NA)
filtroERROR <- rep(NA, length(filterfile))
filterfile
filtroERROR <- rep(NA, nrow(filterfile))
acvfile <- paste(awdfile, "_acv.edit.RDS", sep = "")
acvfile <- readRDS(acvfile)
filterfile <- paste(awdfile, ".edit", sep = "")
filterfile <- readLines(filterfile)
filterfile <- filterfile[6:length(filterfile)]
filterfile <- str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE), stringsAsFactors = FALSE)
names(filterfile) <- c("ini", "fin")
filterfile <- filterfile %>% mutate(ini = ymd_hm(ini), fin = ymd_hm(fin)) %>% arrange(ini)
# Que sean diferentes que NA, con eso me basta... a futuro checar el tipo de filtro
# i <- 1
time <- acvfile$time
filtro <- acvfile$filter
filtroERROR <- rep(NA, nrow(filterfile))
filtroNA <- NULL
for (i in 1:nrow(filterfile)){
indx <- which(time >= filterfile$ini[i] & time <= filterfile$fin[i])
# Solo deben haber numeros, nada de NA
if (sum(is.na(filtro[indx])) != 0){
filtroERROR <- c(filtroERROR, i)
}
# Guarda el index para la otra rueba
filtroNA <- c(filtroNA, indx)
}
# Testear lo de afuera del filtro
NAtest <- 1:nrow(acvfile)
NAtest <- NAtest[-filtroNA]
NAtest <- sum(!is.na(filtro[NAtest]))
if (NAtest != 0){
filtroNA <- 1
} else {
filtroNA <- 0
}
filtroNA
filtroERROR
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
acvfile <- paste(awdfile, "_acv.edit.RDS", sep = "")
acvfile <- readRDS(acvfile)
filterfile <- paste(awdfile, ".edit", sep = "")
filterfile <- readLines(filterfile)
filterfile <- filterfile[6:length(filterfile)]
filterfile <- str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE), stringsAsFactors = FALSE)
names(filterfile) <- c("ini", "fin")
filterfile <- filterfile %>% mutate(ini = ymd_hm(ini), fin = ymd_hm(fin)) %>% arrange(ini)
# Que sean diferentes que NA, con eso me basta... a futuro checar el tipo de filtro
# i <- 1
time <- acvfile$time
filtro <- acvfile$filter
filtroERROR <- rep(NA, nrow(filterfile))
filtroNA <- NULL
for (i in 1:nrow(filterfile)){
indx <- which(time >= filterfile$ini[i] & time <= filterfile$fin[i])
# Solo deben haber numeros, nada de NA
if (sum(is.na(filtro[indx])) != 0){
filtroERROR <- c(filtroERROR, i)
}
# Guarda el index para la otra rueba
filtroNA <- c(filtroNA, indx)
}
# Testear lo de afuera del filtro
NAtest <- 1:nrow(acvfile)
NAtest <- NAtest[-filtroNA]
NAtest <- sum(!is.na(filtro[NAtest]))
if (NAtest != 0){
filtroNA <- 1
} else {
filtroNA <- 0
}
semiper <- create.semiper(acv.edit)
semiper <- create.semiper(acvfile)
per <- unique(str_sub(names(semiper), 2, 2))
per
names(semiper)
per <- "01"
per <- unique(str_sub(names(semiper), 2, 2))
perlist <- list()
i <- grep(paste(p, "$", sep = ""), names(semiper))
p <- "01"
i <- grep(paste(p, "$", sep = ""), names(semiper))
i
paste(p, "$", sep = "")
names(semiper)
per <- unique(str_sub(names(semiper), 2, 2))
perlist <- list()
for (p in per){
i <- grep(paste(p, "$", sep = ""), names(semiper))
if (length(i) == 2){
temp <- bind_rows(semiper[[i[2]]], semiper[[i[1]]]) %>% arrange()
} else {
temp <- semiper[[i[1]]]
}
if (as.numeric(p) < 10){p <- paste("0", p, sep ="")}
cmd <- paste("perlist <- append(perlist, list(per", p, " = temp))", sep = "")
eval(parse(text=cmd))
}
semiper <- perlist
per
p
acvfile <- paste(awdfile, "_acv.edit.RDS", sep = "")
acvfile <- readRDS(acvfile)
filterfile <- paste(awdfile, ".edit", sep = "")
filterfile <- readLines(filterfile)
filterfile <- filterfile[6:length(filterfile)]
filterfile <- str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE), stringsAsFactors = FALSE)
names(filterfile) <- c("ini", "fin")
filterfile <- filterfile %>% mutate(ini = ymd_hm(ini), fin = ymd_hm(fin)) %>% arrange(ini)
# Que sean diferentes que NA, con eso me basta... a futuro checar el tipo de filtro
# i <- 1
time <- acvfile$time
filtro <- acvfile$filter
filtroERROR <- rep(NA, nrow(filterfile))
filtroNA <- NULL
for (i in 1:nrow(filterfile)){
indx <- which(time >= filterfile$ini[i] & time <= filterfile$fin[i])
# Solo deben haber numeros, nada de NA
if (sum(is.na(filtro[indx])) != 0){
filtroERROR <- c(filtroERROR, i)
}
# Guarda el index para la otra rueba
filtroNA <- c(filtroNA, indx)
}
# Testear lo de afuera del filtro
NAtest <- 1:nrow(acvfile)
NAtest <- NAtest[-filtroNA]
NAtest <- sum(!is.na(filtro[NAtest]))
if (NAtest != 0){
filtroNA <- 1
} else {
filtroNA <- 0
}
# Usar el acv.edit para crear los semiperiodos con la función
semiper <- create.semiper(acvfile)
# Redistirbuir los trozos con codigo del create.actogram()
# Combinar noche -> dia mismo periodo    p <- "01"
per <- unique(str_sub(names(semiper), 2, 2))
perlist <- list()
per
p
p <- "1"
paste(p, "$", sep = "")
names(semiper)
i <- grep(paste(p, "$", sep = ""), names(semiper))
i
temp <- bind_rows(semiper[[i[2]]], semiper[[i[1]]]) %>% arrange()
acvfile <- paste(awdfile, "_acv.edit.RDS", sep = "")
acvfile <- readRDS(acvfile)
filterfile <- paste(awdfile, ".edit", sep = "")
filterfile <- readLines(filterfile)
filterfile <- filterfile[6:length(filterfile)]
filterfile <- str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE), stringsAsFactors = FALSE)
names(filterfile) <- c("ini", "fin")
filterfile <- filterfile %>% mutate(ini = ymd_hm(ini), fin = ymd_hm(fin)) %>% arrange(ini)
# Que sean diferentes que NA, con eso me basta... a futuro checar el tipo de filtro
# i <- 1
time <- acvfile$time
filtro <- acvfile$filter
filtroERROR <- rep(NA, nrow(filterfile))
filtroNA <- NULL
for (i in 1:nrow(filterfile)){
indx <- which(time >= filterfile$ini[i] & time <= filterfile$fin[i])
# Solo deben haber numeros, nada de NA
if (sum(is.na(filtro[indx])) != 0){
filtroERROR <- c(filtroERROR, i)
}
# Guarda el index para la otra rueba
filtroNA <- c(filtroNA, indx)
}
# Testear lo de afuera del filtro
NAtest <- 1:nrow(acvfile)
NAtest <- NAtest[-filtroNA]
NAtest <- sum(!is.na(filtro[NAtest]))
if (NAtest != 0){
filtroNA <- 1
} else {
filtroNA <- 0
}
# Usar el acv.edit para crear los semiperiodos con la función
semiper <- create.semiper(acvfile)
# Redistirbuir los trozos con codigo del create.actogram()
# Combinar noche -> dia mismo periodo    p <- "1"
per <- unique(str_sub(names(semiper), 2, 2))
perlist <- list()
for (p in per){
# Capturar lo que termine en p
i <- grep(paste(p, "$", sep = ""), names(semiper))
if (length(i) == 2){
temp <- bind_rows(semiper[[i[2]]], semiper[[i[1]]]) %>% arrange()
} else {
temp <- semiper[[i[1]]]
}
if (as.numeric(p) < 10){p <- paste("0", p, sep ="")}
cmd <- paste("perlist <- append(perlist, list(per", p, " = temp))", sep = "")
eval(parse(text=cmd))
}
semiper <- perlist
names(semiper)
semiper$per01[["time"]]
min(semiper$per01[["time"]])
timelist <- function(df){
return(min(df$per01[["time"]]))
}
timelist <- function(df){
return(min(df$time))
}
timelist(semiper$per01)
sapply(X = semiper, FUN = timelist)
timelist <- sapply(X = semiper, FUN = timelist)
t(timelist)
data.frame(time = timelist)
timelist <- data.frame(time = timelist)
timelist %>% mutate(period = row.name(timelist) )
timelist %>% mutate(period = rowname(timelist) )
timelist %>% mutate(period = row.names(timelist) )
timelist %>% mutate(period = row.names(timelist), time = as.POSIXct(time) )
lubridate::origin
timelist %>% mutate(period = row.names(timelist),
time = as_datetime(time, lubridate::origin),
tlist = format(date(time, "%d")))
timelist %>% mutate(period = row.names(timelist),
time = as_datetime(time, lubridate::origin),
tlist = format(date(time), "%d")))
timelist %>% mutate(period = row.names(timelist),
time = as_datetime(time, lubridate::origin),
tlist = format(date(time), "%d"))
timelist %>% mutate(period = row.names(timelist),
time = as_datetime(time, lubridate::origin),
tlist = format(date(time), "%a %d/%m/%y"))
timelist %>% mutate(period = row.names(timelist),
time = as_datetime(time, lubridate::origin),
tlist = format(date(time), "%A %d/%m/%y"))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
test <- check.acvfilter(awdfile)
runApp('D:/OneDrive/INTA/Actigrafia')
runApp('D:/OneDrive/INTA/Actigrafia')
runApp('D:/OneDrive/INTA/Actigrafia')
str_sub("per00 input$perChoose", 1, 5)
runApp('D:/OneDrive/INTA/Actigrafia')
set$ininoc
as.numeric(set$ininoc)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
awdfolder <- "D:/OneDrive/INTA/Actigrafia/testfolder/test_kansas"
setwd(awdfolder)
archivos <- dir()
archivos <- archivos[grep(".[Aa][Ww][Dd]$", archivos)]
awdfile <- archivos[1]
awdfile <- str_replace(awdfile, ".AWD", "")
semiperEdit0 <- check.acvfilter(awdfile)
periodos <- semiperEdit0$timelist
periodos
periodos <- paste(periodos$period, "-", periodos$tlist)
periodos
perChoose <- periodos[2]
data <- check.acvfilter(awdfile)
data <- data$semiper
data <- data$semiper
data <- check.acvfilter(awdfile)
data <- data$semiper
periodo <- str_sub(perChoose, 1, 5)  # input
periodo <- data[[periodo]]
gdata <- check.acvfilter(awdfile)
gdata <- data$semiper
gdata <- check.acvfilter(awdfile)
gdata <- gdata$semiper
gdata <- gdata$per01
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/testScript.R', echo=TRUE)
windows()
create.plotActo(gdata)
lim <- as.numeric(set$ininoc)/3600
semiperdf <- mutate(semiperdf, xscale = ifelse(hrdec < lim,  hrdec + 24, hrdec))
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
xlabel <- ifelse(xscale >= 48, xscale - 48, ifelse(xscale >= 24, xscale - 24, xscale))
limX <- c(min(xscale), max(xscale))
head(gdata)
tail(gdata)
xscale <- seq(as.numeric(set$ininoc)/3600, length.out = 25)
xscale
limites = NULL
limites == "NULL"
class(limites) == "NULL"
source('D:/OneDrive/INTA/Actigrafia/func_processAwd/create.plotSimple.R', encoding = 'UTF-8', echo=TRUE)
runApp('D:/OneDrive/INTA/Actigrafia/testScript.R')
runApp('D:/OneDrive/INTA/Actigrafia/testScript.R')
create.plotSimple(gdata, limites = NULL)
runApp('D:/OneDrive/INTA/Actigrafia/testScript.R')
create.plotSimple(gdata, limites = c(24,40))
create.plotSimple(gdata, limites = c(32,40))
runApp('D:/OneDrive/INTA/Actigrafia/testScript.R')
runApp('D:/OneDrive/INTA/Actigrafia/testScript.R')
runApp('D:/OneDrive/INTA/Actigrafia/testScript.R')
create.plotSimple(gdata)
