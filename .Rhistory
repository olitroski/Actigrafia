ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "white", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0.05)
theme(panel.grid.minor.y = element_blank())
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "white", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 110)) +
theme(panel.grid.minor.y = element_blank())
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "white", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 105)) +
theme(panel.grid.minor.y = element_blank())
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 105)) +
theme(panel.grid.minor.y = element_blank())
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 105)) +
theme(panel.grid.minor.y = element_blank()) +
labs(title = "Distribución de la estatura" + ylab = "N", xlab = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 105)) +
theme(panel.grid.minor.y = element_blank()) +
labs(title = "Distribución de la estatura", ylab = "N", xlab = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 105)) +
theme(panel.grid.minor.y = element_blank()) +
labs(title = "Distribución de la estatura", y = "N", x = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 105)) +
theme(panel.grid.minor.y = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 105), breaks(seq(0,100,10))) +
theme(panel.grid.minor.y = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 105), breaks = seq(0,100,10)) +
theme(panel.grid.minor.y = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 105), breaks = seq(0,100,10)) +
theme(panel.grid.minor.y = element_blank(), panel.grid.minor.x = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 105), breaks = seq(0,100,10)) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.mayor.x = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 105), breaks = seq(0,100,10)) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187), expand = c(0,0)) + theme_bw() +
scale_y_continuous(expand = c(0,0), limits = c(0, 105), breaks = seq(0,100,10)) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(expand = c(0,0), limits = c(155, 188), breaks = c(156:187)) +
scale_y_continuous(expand = c(0,0), limits = c(  0, 105), breaks = seq(0,100,10)) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(expand = c(0,0), limits = c(155, 188), breaks = c(155:188)) +
scale_y_continuous(expand = c(0,0), limits = c(  0, 105), breaks = seq(0,100,10)) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(155:188)) +
scale_y_continuous(expand = c(0,0), limits = c(  0, 105), breaks = seq(0,100,10)) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) +
scale_y_continuous(expand = c(0,0), limits = c(  0, 105), breaks = seq(0,100,10)) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura")
ggplot(datos, aes(x = estatura)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) +
scale_y_continuous(expand = c(0,0), limits = c(  0, 105), breaks = seq(0,100,10)) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura") +
theme_bw()
ggplot(datos, aes(x = estatura)) + theme_bw() +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
scale_x_continuous(breaks = c(156:187)) +
scale_y_continuous(expand = c(0,0), limits = c(  0, 105), breaks = seq(0,100,10)) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank()) +
labs(title = "Distribución de la estatura", y = "Conteo", x = "Estatura")
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp()
head(periodo)
vectSeq <- Vectorize(seq.default, vectorize.args = c("from", "to"))
segm <- find.segment(periodo, "st.edit", filtro = "S")
segm
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
ranges
ini     <- lapply(ranges, function(x) min(data$time[x]))
fin     <- lapply(ranges, function(x) max(data$time[x]))
meanAct <- lapply(ranges, function(x) mean(data$act.edit[x]))
filtro  <- lapply(ranges, function(x) unique(data$filter[x]))
head(periodo)
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
meanAct <- lapply(ranges, function(x) mean(periodo$act.edit[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
dataSleep <- data.frame(i = 1:length(ranges),
ini = paste(ini, sep = ","),
fin = paste(fin, sep = ","),
meanAct = paste(meanAct, sep = ";"),
filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep
head(periodo)
# Indices y segmentos SUEÑO
segm <- find.segment(periodo, "st.edit", filtro = "S")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
meanAct <- lapply(ranges, function(x) mean(periodo$act.edit[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataSleep <- data.frame(i = 1:length(ranges),
ini = paste(ini, sep = ","),
fin = paste(fin, sep = ","),
meanAct = paste(meanAct, sep = ";"),
filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep
str(periodo)
segm <- find.segment(periodo, "st.edit", filtro = "S")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
ini
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
fin
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
filtro
dataSleep <- data.frame(i = 1:length(ranges),
ini = paste(ini, sep = ","),
fin = paste(fin, sep = ","),
filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep
# Indices y segmentos SUEÑO
segm <- find.segment(periodo, "st.edit", filtro = "S")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataSleep <- data.frame(i = 1:length(ranges),
ini = paste(ini, sep = ","),
fin = paste(fin, sep = ","),
estado = "Sueño",
filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep
dataSleep <- mutate(dataSleep, inicio = as_datetime(ini, lubridate::origin))
dataSleep
dataSleep <- data.frame(i = 1:length(ranges),
ini = paste(ini, sep = ","),
fin = paste(fin, sep = ","),
estado = "S",
filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep
dataSleep <- mutate(dataSleep, inicio = as_datetime(ini, lubridate::origin))
dataSleep
# Reordenar la data
dataSleep <- data.frame(i = 1:length(ranges),
ini = paste(ini, sep = ","),
fin = paste(fin, sep = ","),
estado = "S",
filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
str(dataSleep)
dataSleep <- mutate(dataSleep, inicio = as_datetime(as.numeric(ini), lubridate::origin))
dataSleep
# Reordenar la data
dataSleep <- data.frame(i = 1:length(ranges),
ini = paste(ini, sep = ","),
fin = paste(fin, sep = ","),
estado = "S",
filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep <- mutate(dataSleep, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
dataSleep
# Procesado simple de la tabla
vectSeq <- Vectorize(seq.default, vectorize.args = c("from", "to"))
# Indices y segmentos SUEÑO
segm <- find.segment(periodo, "st.edit", filtro = "S")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataSleep <- data.frame(i = 1:length(ranges),
ini = paste(ini, sep = ","),
fin = paste(fin, sep = ","),
estado = "S",
filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep <- mutate(dataSleep, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
# Indices y segmentos VIGILIA
segm <- find.segment(periodo, "st.edit", filtro = "W")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataWake <- data.frame(i = 1:length(ranges),
ini = paste(ini, sep = ","),
fin = paste(fin, sep = ","),
estado = "S",
filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataWake <- mutate(dataWake, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
dataSleep
dataWake
# Procesado simple de la tabla
vectSeq <- Vectorize(seq.default, vectorize.args = c("from", "to"))
# Indices y segmentos SUEÑO
segm <- find.segment(periodo, "st.edit", filtro = "S")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataSleep <- data.frame(i = 1:length(ranges),
ini = paste(ini, sep = ","),
fin = paste(fin, sep = ","),
estado = "S",
filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep <- mutate(dataSleep, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
# Indices y segmentos VIGILIA
segm <- find.segment(periodo, "st.edit", filtro = "W")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataWake <- data.frame(i = 1:length(ranges),
ini = paste(ini, sep = ","),
fin = paste(fin, sep = ","),
estado = "W",
filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataWake <- mutate(dataWake, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
dataSleep
dataWake
data <- bind_rows(dataSleep, dataWake)
data <- mutate(data, duracion = as.numeric(termino - inicio))
data
data <- bind_rows(dataSleep, dataWake)
data <- select(data, estado, filtro, inicio, termino)
data <- arrange(data, inicio)
data <- mutate(data, duracion = as.numeric(termino - inicio))
data
data <- bind_rows(dataSleep, dataWake)
data <- select(data, inicio, termino, estado, filtro)
data <- arrange(data, inicio)
data <- mutate(data, duracion = as.numeric(termino - inicio))
data
data <- mutate(data, inicio = format(inicio, format = "%d-%b-%Y %H:%M"))
data
# Combinar y terminar
data <- bind_rows(dataSleep, dataWake)
data <- select(data, inicio, termino, estado, filtro)
data <- arrange(data, inicio)
data <- mutate(data, duracion = as.numeric(termino - inicio))
data <- mutate(data, inicio = format(inicio,  format = "%d/%m/%Y %H:%M"),
termino = format(termino, format = "%d/%m/%Y %H:%M"))
data
str(data)
runApp()
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp()
periodo
vectSeq <- Vectorize(seq.default, vectorize.args = c("from", "to"))
segm <- find.segment(periodo, "st.edit", filtro = "S")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
segm <- find.segment(periodo, "st.edit", filtro = "S")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataSleep <- data.frame(ini = paste(ini, sep = ","), fin = paste(fin, sep = ","),
estado = "S", filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep <- mutate(dataSleep, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
dataSleep
segm <- find.segment(periodo, "st.edit", filtro = "W")
segm
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
ranges
nrow(segm)
if (nrow(segm) == 1){
ranges <- list(ranges)
}
ranges
# Indices y segmentos VIGILIA
segm <- find.segment(periodo, "st.edit", filtro = "W")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
if (nrow(segm) == 1){ranges <- list(ranges)}
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataWake <- data.frame(ini = paste(ini, sep = ","), fin = paste(fin, sep = ","),
estado = "W", filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataWake <- mutate(dataWake, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
dataWake
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp()
segm <- find.segment(periodo, "st.edit", filtro = "W")
segm
nrow(segm)
# Procesado simple de la tabla
vectSeq <- Vectorize(seq.default, vectorize.args = c("from", "to"))
# Indices y segmentos SUEÑO
segm <- find.segment(periodo, "st.edit", filtro = "S")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
if (nrow(segm) == 1){ranges <- list(ranges)}
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataSleep <- data.frame(ini = paste(ini, sep = ","), fin = paste(fin, sep = ","),
estado = "S", filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep <- mutate(dataSleep, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
# Indices y segmentos VIGILIA
segm <- find.segment(periodo, "st.edit", filtro = "W")
if (nrow(segm) == 0){
dataWake <- NULL
} else {
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
if (nrow(segm) == 1){ranges <- list(ranges)}
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataWake <- data.frame(ini = paste(ini, sep = ","), fin = paste(fin, sep = ","),
estado = "W", filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataWake <- mutate(dataWake, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
}
# Combinar y terminar
data <- bind_rows(dataSleep, dataWake)
data <- select(data, inicio, termino, estado, filtro)
data <- arrange(data, inicio)
data <- mutate(data, duracion = as.numeric(termino - inicio))
data <- mutate(data, inicio = format(inicio,  format = "%d-%m-%Y  %H:%M"),
termino = format(termino, format = "%d-%m-%Y  %H:%M"))
# Y el resultado
data
segm <- find.segment(periodo, "st.edit", filtro = "S")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
if (nrow(segm) == 1){ranges <- list(ranges)}
segm
ranges
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
ini
fin
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
filtro
dataSleep <- data.frame(ini = paste(ini, sep = ","), fin = paste(fin, sep = ","),
estado = "S", filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep <- mutate(dataSleep, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
dataSleep
# Indices y segmentos VIGILIA
segm <- find.segment(periodo, "st.edit", filtro = "W")
if (nrow(segm) == 0){
dataWake <- NULL
} else {
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
if (nrow(segm) == 1){ranges <- list(ranges)}
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataWake <- data.frame(ini = paste(ini, sep = ","), fin = paste(fin, sep = ","),
estado = "W", filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataWake <- mutate(dataWake, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
}
# Indices y segmentos SUEÑO
segm <- find.segment(periodo, "st.edit", filtro = "S")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
if (nrow(segm) == 1){ranges <- list(ranges)}
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataSleep <- data.frame(ini = paste(ini, sep = ","), fin = paste(fin, sep = ","),
estado = "S", filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep <- mutate(dataSleep, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
data <- bind_rows(dataSleep, dataWake)
data
data <- select(data, inicio, termino, estado, filtro)
data
data <- arrange(data, inicio)
mutate(data, duracion = as.numeric(termino - inicio))
mutate(data, duracion = (termino - inicio))
mutate(data, duracion = as.period(termino - inicio, unit = "minutes"))
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp()
# Procesado simple de la tabla
vectSeq <- Vectorize(seq.default, vectorize.args = c("from", "to"))
# Indices y segmentos SUEÑO
segm <- find.segment(periodo, "st.edit", filtro = "S")
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
if (nrow(segm) == 1){ranges <- list(ranges)}
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataSleep <- data.frame(ini = paste(ini, sep = ","), fin = paste(fin, sep = ","),
estado = "S", filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataSleep <- mutate(dataSleep, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
# Indices y segmentos VIGILIA
segm <- find.segment(periodo, "st.edit", filtro = "W")
if (nrow(segm) == 0){
dataWake <- NULL
} else {
ranges <- vectSeq(from = segm$ini, to = segm$fin, by = 1)
if (nrow(segm) == 1){ranges <- list(ranges)}
# Stats
ini     <- lapply(ranges, function(x) min(periodo$time[x]))
fin     <- lapply(ranges, function(x) max(periodo$time[x]))
filtro  <- lapply(ranges, function(x) unique(periodo$filter[x]))
# Reordenar la data
dataWake <- data.frame(ini = paste(ini, sep = ","), fin = paste(fin, sep = ","),
estado = "W", filtro = paste(filtro, sep = ","), stringsAsFactors = FALSE)
dataWake <- mutate(dataWake, inicio = as_datetime(as.numeric(ini), lubridate::origin),
termino = as_datetime(as.numeric(fin), lubridate::origin))
}
# Combinar y terminar
data <- bind_rows(dataSleep, dataWake)
data <- select(data, inicio, termino, estado, filtro)
data <- arrange(data, inicio)
mutate(data, duracion = as.period(termino - inicio, unit = "minutes"))
mutate(data, duracion = as.character(as.period(termino - inicio, unit = "minutes")))
mutate(data, duracion = as.period(termino - inicio, unit = "minutes"), duracion = as.character(duracion))
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp()
runApp()
help(box)
runApp()
runApp()
