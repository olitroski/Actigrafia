BenjaminVenegas_acv <- readRDS("D:/OneDrive/INTA/Actigrafia/testfolder/BenjaminVenegas_acv.rds")
View(BenjaminVenegas_acv)
library(shiny); runApp('OneDrive/App de prueba.R')
list.files()
dir()
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/testScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/testScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/testScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/testScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp('D:/OneDrive/INTA/Actigrafia/testScript.R')
runApp('D:/OneDrive/INTA/Actigrafia')
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp('D:/OneDrive/INTA/Actigrafia')
head(gdata)
summary(gdata$hrdec)
semiperdf <- gdata
lim <- as.numeric(set$ininoc)/3600
lim
semiperdf <- mutate(semiperdf, xscale = ifelse(hrdec < lim,  hrdec + 24, hrdec))
source('D:/OneDrive/INTA/Actigrafia/func_processAwd/create.plotSimple.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp()
awdfolder <- "D:/OneDrive/INTA/Actigrafia/testfolder/test_kansas"
setwd(awdfolder)
archivos <- dir()
archivos <- archivos[grep(".[Aa][Ww][Dd]$", archivos)]
awdfile <- archivos[1]
awdfile <- str_replace(awdfile, ".AWD", "")
acvfile <- paste(awdfile, "_acv.edit.RDS", sep = "")
acvfile <- paste(awdfile, "_acv.edit.RDS", sep = "")
acvfile <- readRDS(acvfile)
acvfile
filterfile <- paste(awdfile, ".edit", sep = "")
filterfile <- readLines(filterfile)
filterfile <- filterfile[6:length(filterfile)]
filterfile <- str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE), stringsAsFactors = FALSE)
names(filterfile) <- c("ini", "fin")
filterfile <- filterfile %>% mutate(ini = ymd_hm(ini), fin = ymd_hm(fin)) %>% arrange(ini)
filterfile
time <- acvfile$time
filtro <- acvfile$filter
filtroERROR <- rep(NA, nrow(filterfile))
filtroNA <- NULL
for (i in 1:nrow(filterfile)){
indx <- which(time >= filterfile$ini[i] & time <= filterfile$fin[i])
# Solo deben haber numeros, nada de NA
if (sum(is.na(filtro[indx])) != 0){
filtroERROR <- c(filtroERROR, i)
}
# Guarda el index para la otra rueba
filtroNA <- c(filtroNA, indx)
}
# Testear lo de afuera del filtro
NAtest <- 1:nrow(acvfile)
NAtest <- NAtest[-filtroNA]
NAtest <- sum(!is.na(filtro[NAtest]))
if (NAtest != 0){
filtroNA <- 1
} else {
filtroNA <- 0
}
semiper <- create.semiper(acvfile)
# Usar el acv.edit para crear los semiperiodos con la funci칩n ---------
semiper <- create.semiper(acvfile)
# Redistirbuir los trozos con codigo del create.actogram()
# Combinar noche -> dia mismo periodo    p <- "1" ------
per <- unique(str_sub(names(semiper), 2, 2))
perlist <- list()
for (p in per){
# Capturar lo que termine en p
i <- grep(paste(p, "$", sep = ""), names(semiper))
if (length(i) == 2){
temp <- bind_rows(semiper[[i[2]]], semiper[[i[1]]]) %>% arrange()
} else {
temp <- semiper[[i[1]]]
}
if (as.numeric(p) < 10){p <- paste("0", p, sep ="")}
cmd <- paste("perlist <- append(perlist, list(per", p, " = temp))", sep = "")
eval(parse(text=cmd))
}
semiper <- perlist
names(semiper)
lim <- as.numeric(set$ininoc)/3600
lim
names(semiper)
perlist <- base::lapply(X = semiper,
function(x) mutate(x, xscale = ifelse(hrdec < lim, hrdec + 24, hrdec)))
head(perlist$per01)
head(semiper$per01)
summary(perlist$per01["xscale"])
plot(perlist$per01["xscale"], perlist$per01["hrdec"])
plot(perlist$per01[["xscale"]], perlist$per01[["hrdec"]])
plot(perlist$per01[["hrdec"]], perlist$per01[["xscale"]])
acvfile <- paste(awdfile, "_acv.edit.RDS", sep = "")
acvfile <- readRDS(acvfile)
filterfile <- paste(awdfile, ".edit", sep = "")
filterfile <- readLines(filterfile)
filterfile <- filterfile[6:length(filterfile)]
filterfile <- str_split(filterfile, ": ", simplify = TRUE)[,2]
filterfile <- as.data.frame(str_split(filterfile, " - ", simplify = TRUE), stringsAsFactors = FALSE)
names(filterfile) <- c("ini", "fin")
filterfile <- filterfile %>% mutate(ini = ymd_hm(ini), fin = ymd_hm(fin)) %>% arrange(ini)
# Que sean diferentes que NA, con eso me basta... a futuro checar el tipo de filtro
# i <- 1
time <- acvfile$time
filtro <- acvfile$filter
filtroERROR <- rep(NA, nrow(filterfile))
filtroNA <- NULL
for (i in 1:nrow(filterfile)){
indx <- which(time >= filterfile$ini[i] & time <= filterfile$fin[i])
# Solo deben haber numeros, nada de NA
if (sum(is.na(filtro[indx])) != 0){
filtroERROR <- c(filtroERROR, i)
}
# Guarda el index para la otra rueba
filtroNA <- c(filtroNA, indx)
}
# Testear lo de afuera del filtro
NAtest <- 1:nrow(acvfile)
NAtest <- NAtest[-filtroNA]
NAtest <- sum(!is.na(filtro[NAtest]))
if (NAtest != 0){
filtroNA <- 1
} else {
filtroNA <- 0
}
# Usar el acv.edit para crear los semiperiodos con la funci칩n ---------
semiper <- create.semiper(acvfile)
# Redistirbuir los trozos con codigo del create.actogram()
# Combinar noche -> dia mismo periodo    p <- "1" ------
per <- unique(str_sub(names(semiper), 2, 2))
perlist <- list()
for (p in per){
# Capturar lo que termine en p
i <- grep(paste(p, "$", sep = ""), names(semiper))
if (length(i) == 2){
temp <- bind_rows(semiper[[i[2]]], semiper[[i[1]]]) %>% arrange()
} else {
temp <- semiper[[i[1]]]
}
if (as.numeric(p) < 10){p <- paste("0", p, sep ="")}
cmd <- paste("perlist <- append(perlist, list(per", p, " = temp))", sep = "")
eval(parse(text=cmd))
}
# semiper <- perlist
# Corregir la hora continua decimal ac치 porque en la funci칩n del grafico da problema
# Hora decimal continua ------
lim <- as.numeric(set$ininoc)/3600
perlist <- base::lapply(X = perlist,
function(x) mutate(x, xscale = ifelse(hrdec < lim,
hrdec + 24,
hrdec)))
# Capturar el valor inicial de cada lista para usarla en el selectInput
timelist <- function(df){ return(min(df$time)) }
timelist <- sapply(X = perlist, FUN = timelist)
timelist <- data.frame(time = timelist)
timelist <- timelist %>% mutate(period = row.names(timelist),
time = as_datetime(time, lubridate::origin),
tlist = format(date(time), "%A %d/%m/%y"))
source('D:/OneDrive/INTA/Actigrafia/func_processAwd/check.acvfilter.R', encoding = 'UTF-8', echo=TRUE)
test <- check.acvfilter(awdfile)
names(test)
names(test$semiper)
filtroNA
filtroERROR
timelist
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp()
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp()
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp()
source('D:/OneDrive/INTA/Actigrafia/mainScript.R', encoding = 'UTF-8', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
